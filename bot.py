import os, asyncio, logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç!
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

dp = Dispatcher(storage=MemoryStorage())
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# ===== HANDLERS =====
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        "üé∂ –ü—Ä–∏–≤–µ—Ç!\n"
        "–Ø –ø—Ä–µ–≤—Ä–∞—â–∞—é –≤–∞—à–∏ —Å—Ç–∏—Ö–∏ –≤ –ø–µ—Å–Ω—é –∑–∞ 24 —á –∏–ª–∏ –¥–µ–ª–∞—é –∫–ª–∏–ø –∑–∞ 7 –¥–Ω–µ–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ:\n"
        "‚Ä¢ /song ‚Äî –∑–∞–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–∫\n"
        "‚Ä¢ /clip ‚Äî –∑–∞–∫–∞–∑–∞—Ç—å –∫–ª–∏–ø"
    )
    await message.answer(text)

@dp.message(Command("song"))
async def order_song(message: types.Message):
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ + –ø–æ–∂–µ–ª–∞–Ω–∏—è (–∂–∞–Ω—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ).\n"
        "–Ø –ø—Ä–∏—à–ª—é –º–∏–Ω—É—Ç–Ω—ã–π –¥–µ–º–æ-—Ñ—Ä–∞–≥–º–µ–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
    )

@dp.message(Command("clip"))
async def order_clip(message: types.Message):
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —Ç—Ä–µ–∫ –∏–ª–∏ —Å—Å—ã–ª–∫—É, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∏–¥–µ—é –∫–ª–∏–ø–∞.\n"
        "–ß–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ 20-—Å–µ–∫. –ø—Ä–µ–≤—å—é!"
    )

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())